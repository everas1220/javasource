- java.util : import 구문 필요

1) StringTokenizer 클래스
 - 문자열을 지정된 구분자로 분리
 - 구분자로 사용할 수 있는 문자는 단 한문자만 가능
 
2) Date 클래스
 - 현재 시스템 날짜, 시간 처리
 -Thu Mar 13 13:02:55 KST 2025 형태
 - + SimpleDateformat

*)컬렉션 프레임워크
   
  *-0)
   -데이터를 담는 다양한 방법에 대한 클래스(인터페이스) 모음
   - java.util.collection

  *-1)List 클래스
   - List : 배열과 같은 개념
   - List<E> or T, K, V :무조건 객체 타입이 하나 필요함
   - 순서대로 담기, 인덱스로 접근 가능
   - 배열의 단점(개발자의 불편함)을 해결
    - 구현 클래스 : ArrayList, LickedList, Stack, Queue.......등등
     - ArrayList : 배열
     - LickedList : 리스트를 링크로 연결
     - 순차적으로 추가/삭제 : ArrayList가 LickedList보다 빠르다(단. ArrayList 저장 공간이 확보 되어야함)
     - 중간 데이터를 추가/삭제 : LickedList가 ArrayList보다 빠르다.
   -Stack)
    -LIFD(Last In First Out) - 수식계산에 용이함
    - unde /redo, 브라우저 뒤로/앞으로
   -Queue)
    - FIFO(First In First Out) 먼저들어간게 먼저나옴 
    - buffer, 최근사용문서 같은것에 사용됨

  *-2)Set 클래스 
   - 중복된 요소를 메모리에 저장하지않음
   - 순서를 유지하지않음
    -equals() + hashcode() : true 이면 중복된 요소로 처리
    - Hashset : 해싱 적용
     - 순서를 유지하고싶을땐 = LickedHashSet 
    - Treeset : 중복된 요소를 허용하지않고 정렬 해줌 

3) Map
  - collection이 부모역할을 할수없음
  - K(Key), V(Value) 구조 사용 
  - K(Key) 값만 중복된 요소 검증
  -HashMap
  -TreeMap

4)Iterator
  - 컬렉션에 저장된 요소들을 읽어오는 방법에 대한 표준화
  - List,set 데이터를 읽어오는 방법과 Map 데이터를 
    읽어오는 방법이 서로 다르기에 표준화를 함
  - hasNext(), next(), remove()
  -Iterator문은 map으로 꺼내기 편함
    Arrays.String(args) : 배열값 출력 
    Array.asList("") : 배열을 리스트로 변환
  - 정렬과 검색을 제공함
   - 정렬 : Arrays.sort(기본타입배열) - 오름차순
            Arrays.sort(객체타입배열,정렬조건) 
            1) Comparator.reverseOrder() : 내림차순
            2) Comparator.naturalOrder() : 오름차순
   - 검색 : 
    1) 순차 검색 : 배열 첫번째 요소부터 하나씩 검색 
    2) 이진 검색 : 정렬된 데이터에서 범위를 반복적으로 반으로 줄여가면서 검색
     -배열 비교 : Arrays.equals(배열1,배열2)

5) Comparator 와 Comparable
  - 두개 다 인터페이스이고 부모객체역할을 가지고 있음
  - Comparator :기본 정렬기준 외에 다른 기준으로 정렬하고자 할때 사용
  - Comparable : 기본 정렬 기준을 구현하는데 사용